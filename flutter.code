import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});
  final String title;
  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {

  String name = '';
  String room = '';

  //エラー表示
  void showError(String message) {
    showDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
            content: Text(message),
          );
        });
  }

  //入室処理
  void enter() {
    if (name.isEmpty) {
      showError('あなたの名前を入力してください。');
      return;
    }
    if (room.isEmpty) {
      showError('部屋名を入力してください。');
      return;
    }
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) {
          return chatPage(name: name, room: room);
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('チャット'),
      ),
      body: ListView(
        children: [
          ListTile(
            title: TextField(
                decoration: InputDecoration(hintText: 'あなたの名前'),
                onChanged: (value) {
                  name = value;
                },
            ),
          ),
          ListTile(
            title: TextField(
                decoration: InputDecoration(hintText: '部署名'),
                onChanged: (value) {
                  room = value;
                },
            ),
          ),
          ListTile(
            title: ElevatedButton(
              onPressed: () {
                enter();
              },
              child: Text('入室する'),
            ),
          ),

        ],
      ),
    );
  }
}

class chatPage extends StatefulWidget {
  const chatPage({required this.name,required this.room,super.key});

  final String name;
  final String room;

  @override
  State<chatPage> createState() => _chatPageState();
}

class _chatPageState extends State<chatPage> {
  List<Item> items = [];
  late FirebaseFirestore firestore;
  late CollectionReference<Map<String, dynamic>> collction;
  final TextEditingController textEditingController = TextEditingController();

  @override
  void initState() {
    super.initState();
    firestore = FirebaseFirestore.instance;
    collction =
        firestore.collection('room').doc(widget.room).collection('items');

    watch();
  }

  //データの更新監視
  Future<void> watch() async {
    collction.snapshots().listen((evnt) {
      if (mounted) {
        setState(() {
          items = evnt.docs.reversed
              .map(
                (document) => Item.fromSnapshot(
                  document.id,
                  document.data(),
                ),
              )
              .toList(growable: false);
        });
      }
    });
  }

  //保存する
  Future<void> save() async {
    final text = textEditingController.text.trim();

    // 空メッセージならSnackBarを表示して中断
    if (text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Center(
            child: Text(
              'メッセージを入力してください',
              textAlign: TextAlign.center,
            ),
          ),
        ),
      );
      return;
    }

    final now = DateTime.now();
    await collction.doc(now.microsecondsSinceEpoch.toString()).set({
      'date': Timestamp.fromDate(now),
      'name': widget.name,
      'text': text,
    });
    textEditingController.text = '';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.room)),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              reverse: true,
              itemBuilder: (context, index) {
                final item = items[index];

                final formattedDate =
                    '${item.date.hour.toString().padLeft(2, '0')}:${item.date.minute.toString().padLeft(2, '0')}';

                return ListTile(
                  title: Text(item.text),
                  subtitle: Text('${item.name} $formattedDate'),
                );
              },
              itemCount: items.length,
            ),
          ),
          SafeArea(
            child: ListTile(
              title: TextField(
                controller: textEditingController,
              ),
              trailing: ElevatedButton(
                  onPressed: () {
                    save();
                  },
                  child: Text('送信'),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class Item {
  const Item({
    required this.id,
    required this.name,
    required this.text,
    required this.date,
  });

  final String id;
  final String name;
  final String text;
  final DateTime date;

  factory Item.fromSnapshot(String id, Map<String, dynamic> document) {
    return Item(
      id: id,
      name: document['name'] is String ? document['name'] : '',
      text: document['text'] is String ? document['text'] : '',
      date:  (document['date'] as Timestamp?)?.toDate() ?? DateTime.now(),
    );
  }
}


